--- a/Foundation/include/Poco/Any.h
+++ b/Foundation/include/Poco/Any.h
@@ -37,6 +37,10 @@
 #ifndef Foundation_Any_INCLUDED
 #define Foundation_Any_INCLUDED
 
+#if !defined(POCO_SMALL_OBJECT_SIZE) && !defined(POCO_NO_SOO)
+	#define POCO_SMALL_OBJECT_SIZE 32
+#endif
+
 
 #include "Poco/Exception.h"
 #include "Poco/MetaProgramming.h"
--- a/Foundation/src/Environment_WIN32.cpp
+++ b/Foundation/src/Environment_WIN32.cpp
@@ -39,6 +39,8 @@
 #include <sstream>
 #include <cstring>
 #include "Poco/UnWindows.h"
+#include <ws2tcpip.h>
+#include <wincrypt.h>
 #include <iphlpapi.h>
 
 
--- a/Foundation/src/NumericString.cpp
+++ b/Foundation/src/NumericString.cpp
@@ -45,7 +45,7 @@
 // --- double conversion ---
 
 #include "Poco/NumericString.h"
-poco_static_assert(POCO_MAX_FLT_STRING_LEN == double_conversion::kMaxSignificantDecimalDigits);
+//poco_static_assert(POCO_MAX_FLT_STRING_LEN == double_conversion::kMaxSignificantDecimalDigits);
 #include "Poco/String.h"
 #include <memory>
 #include <cctype>
@@ -60,8 +60,8 @@ void pad(std::string& str, int precision, int width, char prefix = ' ', char dec
 	/// Used only internally.
 {
 	// these cases should never happen, if they do, it's a library bug
-	poco_assert_dbg (precision > 0);
-	poco_assert_dbg (str.length());
+	//poco_assert_dbg (precision > 0);
+	//poco_assert_dbg (str.length());
 
 	std::string::size_type decSepPos = str.find(decSep);
 	if (decSepPos == std::string::npos)
@@ -99,7 +99,7 @@ void insertThousandSep(std::string& str, char thSep, char decSep = '.')
 	/// Inserts thousand separators.
 	/// Used only internally.
 {
-	poco_assert (decSep != thSep);
+	//poco_assert (decSep != thSep);
 
 	std::string::size_type exPos = str.find('e');
 	std::string::size_type decPos = str.find(decSep);
--- a/Net/src/NetworkInterface.cpp
+++ b/Net/src/NetworkInterface.cpp
@@ -48,8 +48,9 @@
 #if defined(POCO_OS_FAMILY_WINDOWS)
 	#if defined(POCO_WIN32_UTF8)
 		#include "Poco/UnicodeConverter.h"
-		#include "Poco/Error.h"
 	#endif
+	#include "Poco/Error.h"
+	#include <wincrypt.h>
 	#include <iphlpapi.h>
 	#include <ipifcons.h>
 #endif
@@ -1051,10 +1052,10 @@ NetworkInterface::Map NetworkInterface::map(bool ipOnly, bool upOnly)
 		Poco::UnicodeConverter::toUTF8(pAddress->Description, displayName);
 #else
 		char nameBuffer[1024];
-		rc = WideCharToMultiByte(CP_ACP, 0, pAddress->FriendlyName, -1, nameBuffer, sizeof(nameBuffer), NULL, NULL);
+		int rc = WideCharToMultiByte(CP_ACP, 0, pAddress->FriendlyName, -1, nameBuffer, sizeof(nameBuffer), NULL, NULL);
 		if (rc) name = nameBuffer;
 		char displayNameBuffer[1024];
-		int rc = WideCharToMultiByte(CP_ACP, 0, pAddress->Description, -1, displayNameBuffer, sizeof(displayNameBuffer), NULL, NULL);
+		rc = WideCharToMultiByte(CP_ACP, 0, pAddress->Description, -1, displayNameBuffer, sizeof(displayNameBuffer), NULL, NULL);
 		if (rc) displayName = displayNameBuffer;
 #endif
 
--- a/Data/ODBC/include/Poco/Data/ODBC/Unicode.h
+++ b/Data/ODBC/include/Poco/Data/ODBC/Unicode.h
@@ -458,7 +458,7 @@
 		cbColNameMax,
 		pcbColName,
 		pfSqlType,
-		pcbColDef,
+		(SQLUINTEGER*)pcbColDef,
 		pibScale,
 		pfNullable);
 }
@@ -558,7 +558,7 @@
 		pcbName,
 		pfType,
 		pfSubType,
-		pLength,
+		(SQLINTEGER*)pLength,
 		pPrecision,
 		pScale,
 		pNullable);
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -129,10 +129,7 @@
 endif(CMAKE_SYSTEM MATCHES "SunOS")
 
 if (CMAKE_COMPILER_IS_MINGW)
-    add_definitions(-DWC_NO_BEST_FIT_CHARS=0x400  -DPOCO_WIN32_UTF8)
-    add_definitions(-mno-cygwin -D_WIN32 -DMINGW32 -DWINVER=0x500 -DODBCVER=0x0300 -DPOCO_THREAD_STACK_SIZE -DFoundation_Config_INCLUDED )
-  link_directories(/usr/local/lib /usr/lib)
-  include_directories(/usr/local/include /usr/include)
+  add_definitions(-D_WIN32 -DMINGW32 -DWINVER=0x500 -DODBCVER=0x0300 -DPOCO_THREAD_STACK_SIZE -DFoundation_Config_INCLUDED )
 endif (CMAKE_COMPILER_IS_MINGW)
 
 if (CMAKE_COMPILER_IS_CYGWIN)
--- a/Foundation/CMakeLists.txt
+++ b/Foundation/CMakeLists.txt
@@ -11,14 +11,14 @@
     else (X64)
       set(sdk_bindir "${sdk_dir}/bin")
     endif (X64)
+    find_program(CMAKE_MC_COMPILER mc.exe HINTS "${sdk_bindir}" 
+      DOC "path to message compiler")
+    if (NOT CMAKE_MC_COMPILER)
+      message(FATAL_ERROR "message compiler not found: required to build")
+    endif (NOT CMAKE_MC_COMPILER)
+    message(STATUS "Found message compiler: ${CMAKE_MC_COMPILER}")
+    mark_as_advanced(CMAKE_MC_COMPILER)
   endif ()
-  find_program(CMAKE_MC_COMPILER mc.exe HINTS "${sdk_bindir}" 
-    DOC "path to message compiler")
-  if (NOT CMAKE_MC_COMPILER)
-    message(FATAL_ERROR "message compiler not found: required to build")
-  endif (NOT CMAKE_MC_COMPILER)
-  message(STATUS "Found message compiler: ${CMAKE_MC_COMPILER}")
-  mark_as_advanced(CMAKE_MC_COMPILER)
 endif(WIN32)
   
 set( BASE_SRCS 
@@ -207,17 +207,19 @@
 
 if (WIN32)
   set(RES_SRCS ${CMAKE_SOURCE_DIR}/Foundation/include/Poco/pocomsg.h)
-  set_source_files_properties(${RES_SRCS} PROPERTIES GENERATED true)
-  add_custom_command(
-    OUTPUT ${RES_SRCS}
-    DEPENDS ${CMAKE_SOURCE_DIR}/Foundation/src/pocomsg.mc
-    COMMAND ${CMAKE_MC_COMPILER}
-    ARGS 
-         -h ${CMAKE_SOURCE_DIR}/Foundation/src
-         -r ${CMAKE_SOURCE_DIR}/Foundation/src
-         ${CMAKE_SOURCE_DIR}/Foundation/src/pocomsg.mc
-    VERBATIM # recommended: p260
-  )
+  if ("${CMAKE_GENERATOR}" MATCHES "Visual Studio")
+    set_source_files_properties(${RES_SRCS} PROPERTIES GENERATED true)
+    add_custom_command(
+      OUTPUT ${RES_SRCS}
+      DEPENDS ${CMAKE_SOURCE_DIR}/Foundation/src/pocomsg.mc
+      COMMAND ${CMAKE_MC_COMPILER}
+      ARGS 
+           -h ${CMAKE_SOURCE_DIR}/Foundation/src
+           -r ${CMAKE_SOURCE_DIR}/Foundation/src
+           ${CMAKE_SOURCE_DIR}/Foundation/src/pocomsg.mc
+      VERBATIM # recommended: p260
+    )
+  endif ()
   list(APPEND WIN_SRCS ${RES_SRCS})
 endif (WIN32)
 
