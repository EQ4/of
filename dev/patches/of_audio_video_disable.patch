--- a/openframeworks/ofMain.h
+++ b/openframeworks/ofMain.h
@@ -78,8 +78,10 @@
 
 //--------------------------
 // video
+#ifndef TARGET_NO_VIDEO
 #include "ofVideoGrabber.h"
 #include "ofVideoPlayer.h"
+#endif
 
 //--------------------------
 // events
--- a/openframeworks/app/ofAppRunner.cpp
+++ b/openframeworks/app/ofAppRunner.cpp
@@ -20,7 +20,7 @@
 
 
 // adding this for vc2010 compile: error C3861: 'closeQuicktime': identifier not found
-#if defined (TARGET_WIN32) || defined(TARGET_OSX)
+#if !defined(TARGET_NO_VIDEO) && (defined(TARGET_WIN32) || defined(TARGET_OSX))
 	#include "ofQtUtils.h"
 #endif
 
@@ -361,7 +361,7 @@
 	#endif
 
 	// try to close quicktime, for non-linux systems:
-	#if defined(OF_VIDEO_CAPTURE_QUICKTIME) || defined(OF_VIDEO_PLAYER_QUICKTIME)
+	#if !defined(TARGET_NO_VIDEO) && (defined(OF_VIDEO_CAPTURE_QUICKTIME) || defined(OF_VIDEO_PLAYER_QUICKTIME))
 	closeQuicktime();
 	#endif
 
--- a/openframeworks/utils/ofSystemUtils.cpp
+++ b/openframeworks/utils/ofSystemUtils.cpp
@@ -74,7 +74,9 @@
 
 #if defined( TARGET_LINUX ) && defined (OF_USING_GTK)
 #include <gtk/gtk.h>
+#ifndef TARGET_NO_VIDEO
 #include "ofGstUtils.h"
+#endif
 #include "Poco/Condition.h"
 
 #if GTK_MAJOR_VERSION>=3
@@ -188,6 +188,11 @@
 	return FALSE;
 }
 
+static gboolean closeGTK(GtkWidget *widget){
+	gtk_main_quit();
+	return FALSE;
+}
+
 static void initGTK(){
 	static bool initialized = false;
 	if(!initialized){
@@ -196,13 +198,55 @@
 		#endif
 		int argc=0; char **argv = NULL;
 		gtk_init (&argc, &argv);
+		#ifndef TARGET_NO_VIDEO
 		ofGstUtils::startGstMainLoop();
+		#endif
 		initialized = true;
 	}
 
 }
+static void startGTK(GtkWidget *dialog){
+	gtk_init_add((GSourceFunc)closeGTK, NULL);
+	gtk_quit_add_destroy(1, GTK_OBJECT(dialog));
+	gtk_main();
+}
 
 static string gtkFileDialog(GtkFileChooserAction action,string windowTitle,string defaultName=""){
+	#ifdef TARGET_NO_VIDEO
+	initGTK();
+	string results;
+
+	const gchar* button_name = "";
+	switch(action){
+	case GTK_FILE_CHOOSER_ACTION_OPEN:
+		button_name = GTK_STOCK_OPEN;
+		break;
+	case GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER:
+		button_name = GTK_STOCK_SELECT_ALL;
+		break;
+	case GTK_FILE_CHOOSER_ACTION_SAVE:
+		button_name = GTK_STOCK_SAVE;
+		break;
+	default:
+		return "";
+		break;
+	}
+
+	GtkWidget *dialog = gtk_file_chooser_dialog_new(windowTitle.c_str(),
+						  NULL,
+						  action,
+						  button_name, GTK_RESPONSE_ACCEPT,
+						  GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
+						  NULL);
+
+	gtk_file_chooser_set_filename(GTK_FILE_CHOOSER(dialog), defaultName.c_str());
+
+	if (gtk_dialog_run(GTK_DIALOG(dialog)) == GTK_RESPONSE_ACCEPT) {
+		results = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(dialog));
+	}
+	startGTK(dialog);
+	return results;
+	#else
 	initGTK();
 	FileDialogData dialogData;
 	dialogData.action = action;
@@ -216,6 +260,7 @@
 		dialogData.condition.wait(dialogData.mutex);
 	}
 	return dialogData.results;
+	#endif
 }
 
 #endif
@@ -273,6 +318,12 @@
 	#endif
 
 	#if defined( TARGET_LINUX ) && defined (OF_USING_GTK)
+		#ifdef TARGET_NO_VIDEO
+		initGTK();
+		GtkWidget* dialog = gtk_message_dialog_new(NULL, (GtkDialogFlags)0, GTK_MESSAGE_INFO, GTK_BUTTONS_OK, "%s", errorMessage.c_str());
+		gtk_dialog_run(GTK_DIALOG(dialog));
+		startGTK(dialog);
+		#else
 		initGTK();
 		TextDialogData dialogData;
 		dialogData.text = errorMessage;
@@ -282,6 +333,7 @@
 			dialogData.mutex.lock();
 			dialogData.condition.wait(dialogData.mutex);
 		}
+		#endif
 	#endif
 
 	#ifdef TARGET_ANDROID
@@ -587,6 +639,19 @@
 
 string ofSystemTextBoxDialog(string question, string text){
 #if defined( TARGET_LINUX ) && defined (OF_USING_GTK)
+	#ifdef TARGET_NO_VIDEO
+	initGTK();
+	GtkWidget* dialog = gtk_message_dialog_new(NULL, (GtkDialogFlags)0, GTK_MESSAGE_QUESTION, (GtkButtonsType)GTK_BUTTONS_OK_CANCEL, "%s", question.c_str());
+	GtkWidget* content_area = gtk_dialog_get_content_area(GTK_DIALOG(dialog));
+	GtkWidget* textbox = gtk_entry_new();
+	gtk_entry_set_text(GTK_ENTRY(textbox), text.c_str());
+	gtk_container_add(GTK_CONTAINER(content_area), textbox);
+	gtk_widget_show_all(dialog);
+	if(gtk_dialog_run(GTK_DIALOG(dialog)) == GTK_RESPONSE_OK) {
+		text = gtk_entry_get_text(GTK_ENTRY(textbox));
+	}
+	startGTK(dialog);
+	#else
 	initGTK();
 	TextDialogData dialogData;
 	dialogData.text = text;
@@ -598,6 +663,7 @@
 		dialogData.condition.wait(dialogData.mutex);
 	}
 	text = dialogData.text;
+	#endif
 #endif
 
 #ifdef TARGET_OSX
