--- a/ofxOsc/libs/oscpack/src/ip/win32/UdpSocket.cpp
+++ b/ofxOsc/libs/oscpack/src/ip/win32/UdpSocket.cpp
@@ -114,8 +114,8 @@
         }
 
         if( UdpSocket::maxBufferSize > 0 ){
-            setsockopt(socket_, SOL_SOCKET, SO_SNDBUF, &UdpSocket::maxBufferSize, sizeof(UdpSocket::maxBufferSize));
-            setsockopt(socket_, SOL_SOCKET, SO_RCVBUF, &UdpSocket::maxBufferSize, sizeof(UdpSocket::maxBufferSize));
+            setsockopt(socket_, SOL_SOCKET, SO_SNDBUF, reinterpret_cast<const char*>(&UdpSocket::maxBufferSize), sizeof(UdpSocket::maxBufferSize));
+            setsockopt(socket_, SOL_SOCKET, SO_RCVBUF, reinterpret_cast<const char*>(&UdpSocket::maxBufferSize), sizeof(UdpSocket::maxBufferSize));
         }
         
 		std::memset( &sendToAddr_, 0, sizeof(sendToAddr_) );
@@ -452,7 +452,7 @@
                 maxSize = 4098;
             }
             const unsigned long MAX_BUFFER_SIZE = maxSize;
-            data = new char[ MAX_BUFFER_SIZE ];
+            char *data = new char[ MAX_BUFFER_SIZE ];
 		IpEndpointName remoteEndpoint;
 
 		while( !break_ ){
--- a/ofxNetwork/src/ofxTCPManager.cpp
+++ b/ofxNetwork/src/ofxTCPManager.cpp
@@ -166,9 +166,14 @@
 	addr_in.sin_port  = htons(usPort); // short, network byte order
 	addr_in.sin_addr  = *((struct in_addr *)he->h_addr);
 
-    // set to non-blocking before connect
-    if (m_dwTimeoutConnect != NO_TIMEOUT) fcntl(m_hSocket, F_SETFL, O_NONBLOCK);
-    
+	// set to non-blocking before connect
+	#ifdef TARGET_WIN32
+		unsigned long iMode = 1;
+		if (m_dwTimeoutConnect != NO_TIMEOUT) ioctlsocket(m_hSocket, FIONBIO, &iMode);
+	#else
+		if (m_dwTimeoutConnect != NO_TIMEOUT) fcntl(m_hSocket, F_SETFL, O_NONBLOCK);
+	#endif
+
 	bool ret = (connect(m_hSocket, (sockaddr *)&addr_in, sizeof(sockaddr)) != SOCKET_ERROR);
     
     // set a timeout
@@ -176,12 +176,12 @@
         fd_set fd;
         FD_ZERO(&fd);
         FD_SET(m_hSocket, &fd);
-        timeval	tv=	{m_dwTimeoutConnect, 0};
+        timeval	tv=	{(time_t)m_dwTimeoutConnect, 0};
         fd_set fdset;
         if(select(m_hSocket+1,NULL,&fd,NULL,&tv)== 1) {
             int so_error;
             socklen_t len = sizeof so_error;
-            getsockopt(m_hSocket, SOL_SOCKET, SO_ERROR, &so_error, &len);
+            getsockopt(m_hSocket, SOL_SOCKET, SO_ERROR, (char*)&so_error, &len);
             if (so_error == 0) {
                 return true;
             } 
