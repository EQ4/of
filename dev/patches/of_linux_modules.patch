diff --git a/CMakeLists.txt b/CMakeLists.txt
index e3d7ff3..f4c7ca8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -61,6 +61,14 @@ else()
 
 endif()
 
+#// Options ////////////////////////////////////////////////////////////////////
+
+set(OF_ENABLE_AUDIO ON CACHE BOOL
+  "Compile audio features of openFrameworks")
+
+set(OF_ENABLE_VIDEO ON CACHE BOOL
+  "Compile video features of openFrameworks")
+
 #// Setup //////////////////////////////////////////////////////////////////////
 
 set(OF_ROOT_DIR ${CMAKE_CURRENT_LIST_DIR})
@@ -89,13 +97,9 @@ if(CMAKE_SYSTEM MATCHES Linux)
     pkg_check_modules(GTK3 REQUIRED gtk+-3.0)
 
     find_package(Glib REQUIRED)
-    find_package(ALSA REQUIRED)
     find_package(Cairo REQUIRED)
-    find_package(OpenAL REQUIRED)
     find_package(OpenGL REQUIRED)
-    find_package(MPG123 REQUIRED)
     find_package(Freetype REQUIRED)
-    find_package(GStreamer REQUIRED)
     find_package(Fontconfig REQUIRED)
 
     list(APPEND OPENFRAMEWORKS_DEFINITIONS
@@ -104,16 +109,42 @@ if(CMAKE_SYSTEM MATCHES Linux)
     list(APPEND OPENFRAMEWORKS_INCLUDE_DIRS
         ${GTK3_INCLUDE_DIRS}
         ${GLIB_INCLUDE_DIRS}
-        ${ALSA_INCLUDE_DIRS}
         ${CAIRO_INCLUDE_DIR}
-        ${OPENAL_INCLUDE_DIR}
         ${OPENGL_INCLUDE_DIR}
-        ${MPG123_INCLUDE_DIRS}
         ${FREETYPE_INCLUDE_DIRS}
-        ${GSTREAMER_INCLUDE_DIRS}
         ${FONTCONFIG_INCLUDE_DIR}
     )
 
+    if(OF_ENABLE_AUDIO)
+    find_package(ALSA REQUIRED)
+    find_package(OpenAL REQUIRED)
+    find_package(MPG123 REQUIRED)
+    find_package(Sndfile REQUIRED)
+
+    list(APPEND OPENFRAMEWORKS_INCLUDE_DIRS
+        ${ALSA_INCLUDE_DIRS}
+        ${OPENAL_INCLUDE_DIR}
+        ${MPG123_INCLUDE_DIRS}
+        ${SNDFILE_INCLUDE_DIR}
+    )
+    else()
+    list(APPEND OPENFRAMEWORKS_DEFINITIONS
+        -DTARGET_NO_SOUND
+    )
+    endif()
+
+    if(OF_ENABLE_VIDEO)
+    find_package(GStreamer REQUIRED)
+
+    list(APPEND OPENFRAMEWORKS_INCLUDE_DIRS
+        ${GSTREAMER_INCLUDE_DIRS}
+    )
+    else()
+    list(APPEND OPENFRAMEWORKS_DEFINITIONS
+        -DTARGET_NO_VIDEO
+    )
+    endif()
+
 elseif(CMAKE_SYSTEM MATCHES Darwin)
 
     message("OS X support is experimental. Please report issues if you run into something.")
@@ -251,13 +281,6 @@ set(OPENFRAMEWORKS_SOURCES
     "${OF_ROOT_DIR}/src/openframeworks/math/ofVec2f.cpp"
     "${OF_ROOT_DIR}/src/openframeworks/math/ofVec4f.cpp"
 
-    "${OF_ROOT_DIR}/src/openframeworks/sound/ofBaseSoundStream.cpp"
-    "${OF_ROOT_DIR}/src/openframeworks/sound/ofOpenALSoundPlayer.cpp"
-    "${OF_ROOT_DIR}/src/openframeworks/sound/ofRtAudioSoundStream.cpp"
-    "${OF_ROOT_DIR}/src/openframeworks/sound/ofSoundBuffer.cpp"
-    "${OF_ROOT_DIR}/src/openframeworks/sound/ofSoundPlayer.cpp"
-    "${OF_ROOT_DIR}/src/openframeworks/sound/ofSoundStream.cpp"
-
     "${OF_ROOT_DIR}/src/openframeworks/types/ofBaseTypes.cpp"
     "${OF_ROOT_DIR}/src/openframeworks/types/ofColor.cpp"
     "${OF_ROOT_DIR}/src/openframeworks/types/ofParameter.cpp"
@@ -274,17 +297,34 @@ set(OPENFRAMEWORKS_SOURCES
     "${OF_ROOT_DIR}/src/openframeworks/utils/ofURLFileLoader.cpp"
     "${OF_ROOT_DIR}/src/openframeworks/utils/ofUtils.cpp"
     "${OF_ROOT_DIR}/src/openframeworks/utils/ofXml.cpp"
+)
 
+if(OF_ENABLE_AUDIO)
+    list(APPEND OPENFRAMEWORKS_SOURCES
+    "${OF_ROOT_DIR}/src/openframeworks/sound/ofBaseSoundStream.cpp"
+    "${OF_ROOT_DIR}/src/openframeworks/sound/ofOpenALSoundPlayer.cpp"
+    "${OF_ROOT_DIR}/src/openframeworks/sound/ofRtAudioSoundStream.cpp"
+    "${OF_ROOT_DIR}/src/openframeworks/sound/ofSoundBuffer.cpp"
+    "${OF_ROOT_DIR}/src/openframeworks/sound/ofSoundPlayer.cpp"
+    "${OF_ROOT_DIR}/src/openframeworks/sound/ofSoundStream.cpp"
+    )
+endif()
+
+if(OF_ENABLE_VIDEO)
+    list(APPEND OPENFRAMEWORKS_SOURCES
     "${OF_ROOT_DIR}/src/openframeworks/video/ofVideoGrabber.cpp"
     "${OF_ROOT_DIR}/src/openframeworks/video/ofVideoPlayer.cpp"
-)
+    )
+endif()
 
 if(CMAKE_SYSTEM MATCHES Linux)
+    if(OF_ENABLE_VIDEO)
     list(APPEND OPENFRAMEWORKS_SOURCES
     "${OF_ROOT_DIR}/src/openframeworks/video/ofGstUtils.cpp"
     "${OF_ROOT_DIR}/src/openframeworks/video/ofGstVideoGrabber.cpp"
     "${OF_ROOT_DIR}/src/openframeworks/video/ofGstVideoPlayer.cpp"
     )
+    endif()
 elseif(CMAKE_SYSTEM MATCHES Darwin)
     list(APPEND OPENFRAMEWORKS_SOURCES
     "${OF_ROOT_DIR}/src/openframeworks/video/ofAVFoundationPlayer.mm"
@@ -476,6 +516,9 @@ message("++ CMAKE_BUILD_TYPE: " ${CMAKE_BUILD_TYPE})
 message("++ CMAKE_C_COMPILER_ID: "   ${CMAKE_C_COMPILER_ID})
 message("++ CMAKE_CXX_COMPILER_ID: " ${CMAKE_CXX_COMPILER_ID})
 
+message("++ OF_ENABLE_AUDIO: " ${OF_ENABLE_AUDIO})
+message("++ OF_ENABLE_VIDEO: " ${OF_ENABLE_VIDEO})
+
 if(CMAKE_BUILD_TYPE MATCHES Release)
     message("++ CMAKE_C_FLAGS_RELEASE: "   ${CMAKE_C_FLAGS_RELEASE})
     message("++ CMAKE_CXX_FLAGS_RELEASE: " ${CMAKE_CXX_FLAGS_RELEASE})
diff --git a/openFrameworks.cmake b/openFrameworks.cmake
index 32f8576..31cea70 100644
--- a/openFrameworks.cmake
+++ b/openFrameworks.cmake
@@ -70,6 +70,12 @@ endif()
 
 #// Options ////////////////////////////////////////////////////////////////////
 
+set(OF_ENABLE_AUDIO ON CACHE BOOL
+  "Enable audio features of openFrameworks")
+
+set(OF_ENABLE_VIDEO ON CACHE BOOL
+  "Enable video features of openFrameworks")
+
 set(OF_ENABLE_COTIRE ON CACHE BOOL
   "Enable Cotire header precompiler")
 
@@ -149,16 +155,11 @@ if(CMAKE_SYSTEM MATCHES Linux)
     find_package(UDev REQUIRED)
     find_package(Glib REQUIRED)
     find_package(ZLIB REQUIRED)
-    find_package(ALSA REQUIRED)
     find_package(Cairo REQUIRED)
-    find_package(OpenAL REQUIRED)
     find_package(OpenGL REQUIRED)
-    find_package(MPG123 REQUIRED)
     find_package(OpenSSL REQUIRED)
-    find_package(Sndfile REQUIRED)
     find_package(Threads REQUIRED)
     find_package(Freetype REQUIRED)
-    find_package(GStreamer REQUIRED)
     find_package(Fontconfig REQUIRED)
 
     list(APPEND OPENFRAMEWORKS_DEFINITIONS
@@ -170,13 +172,9 @@ if(CMAKE_SYSTEM MATCHES Linux)
         ${GTK3_INCLUDE_DIRS}
         ${GLIB_INCLUDE_DIRS}
         ${ZLIB_INCLUDE_DIRS}
-        ${ALSA_INCLUDE_DIRS}
         ${CAIRO_INCLUDE_DIR}
-        ${OPENAL_INCLUDE_DIR}
         ${OPENGL_INCLUDE_DIR}
-        ${MPG123_INCLUDE_DIRS}
         ${OPENSSL_INCLUDE_DIR}
-        ${SNDFILE_INCLUDE_DIR}
         ${FREETYPE_INCLUDE_DIRS}
         ${GSTREAMER_INCLUDE_DIRS}
         ${FONTCONFIG_INCLUDE_DIR}
@@ -194,21 +193,57 @@ if(CMAKE_SYSTEM MATCHES Linux)
         ${GTK3_LIBRARIES}
         ${GLIB_LIBRARIES}
         ${ZLIB_LIBRARIES}
-        ${ALSA_LIBRARIES}
-        ${OPENAL_LIBRARY}
         ${CAIRO_LIBRARIES}
         ${OPENGL_LIBRARIES}
-        ${MPG123_LIBRARIES}
         ${OPENSSL_LIBRARIES}
-        ${SNDFILE_LIBRARIES}
         ${FREETYPE_LIBRARIES}
-        ${GSTREAMER_LIBRARIES}
         ${FONTCONFIG_LIBRARIES}
         ${CMAKE_THREAD_LIBS_INIT}
+    )
+
+    if(OF_ENABLE_AUDIO)
+    find_package(ALSA REQUIRED)
+    find_package(OpenAL REQUIRED)
+    find_package(MPG123 REQUIRED)
+    find_package(Sndfile REQUIRED)
+
+    list(APPEND OPENFRAMEWORKS_INCLUDE_DIRS
+        ${ALSA_INCLUDE_DIRS}
+        ${OPENAL_INCLUDE_DIR}
+        ${MPG123_INCLUDE_DIRS}
+        ${SNDFILE_INCLUDE_DIR}
+    )
+
+    list(APPEND OPENFRAMEWORKS_LIBRARIES
+        ${ALSA_LIBRARIES}
+        ${OPENAL_LIBRARY}
+        ${MPG123_LIBRARIES}
+        ${SNDFILE_LIBRARIES}
+    )
+    else()
+    list(APPEND OPENFRAMEWORKS_DEFINITIONS
+        -DTARGET_NO_SOUND
+    )
+    endif()
+
+    if(OF_ENABLE_VIDEO)
+    find_package(GStreamer REQUIRED)
+
+    list(APPEND OPENFRAMEWORKS_INCLUDE_DIRS
+        ${GSTREAMER_INCLUDE_DIRS}
+    )
+
+    list(APPEND OPENFRAMEWORKS_LIBRARIES
+        ${GSTREAMER_LIBRARIES}
         ${GSTREAMER_APP_LIBRARIES}
         ${GSTREAMER_BASE_LIBRARIES}
         ${GSTREAMER_VIDEO_LIBRARIES}
     )
+    else()
+    list(APPEND OPENFRAMEWORKS_DEFINITIONS
+        -DTARGET_NO_VIDEO
+    )
+    endif()
 
 elseif(CMAKE_SYSTEM MATCHES Darwin)
 
@@ -871,6 +904,8 @@ message("++ CMAKE_BUILD_TYPE: " ${CMAKE_BUILD_TYPE})
 message("++ CMAKE_C_COMPILER_ID: "   ${CMAKE_C_COMPILER_ID})
 message("++ CMAKE_CXX_COMPILER_ID: " ${CMAKE_CXX_COMPILER_ID})
 
+message("++ OF_ENABLE_AUDIO: "   ${OF_ENABLE_AUDIO})
+message("++ OF_ENABLE_VIDEO: "   ${OF_ENABLE_VIDEO})
 message("++ OF_ENABLE_COTIRE: "  ${OF_ENABLE_COTIRE})
 message("++ OF_ENABLE_CONSOLE: " ${OF_ENABLE_CONSOLE})
 
diff --git a/src/openframeworks/app/ofBaseApp.h b/src/openframeworks/app/ofBaseApp.h
index 65ee996..ba1eecc 100644
--- a/src/openframeworks/app/ofBaseApp.h
+++ b/src/openframeworks/app/ofBaseApp.h
@@ -4,7 +4,11 @@
 #include "ofEvents.h"
 #include "ofBaseTypes.h"
 
-class ofBaseApp : public ofBaseSoundInput, public ofBaseSoundOutput{
+class ofBaseApp
+#ifndef TARGET_NO_SOUND
+:public ofBaseSoundInput, public ofBaseSoundOutput
+#endif
+{
 
 	public:
         ofBaseApp() {
diff --git a/src/openframeworks/ofMain.h b/src/openframeworks/ofMain.h
index f719e81..c00b894 100644
--- a/src/openframeworks/ofMain.h
+++ b/src/openframeworks/ofMain.h
@@ -87,8 +87,10 @@
 
 //--------------------------
 // video
-#include "ofVideoGrabber.h"
-#include "ofVideoPlayer.h"
+#ifndef TARGET_NO_VIDEO
+	#include "ofVideoGrabber.h"
+	#include "ofVideoPlayer.h"
+#endif
 
 //--------------------------
 // events
diff --git a/src/openframeworks/types/ofBaseTypes.cpp b/src/openframeworks/types/ofBaseTypes.cpp
index 0aa3aae..94a0454 100644
--- a/src/openframeworks/types/ofBaseTypes.cpp
+++ b/src/openframeworks/types/ofBaseTypes.cpp
@@ -327,6 +327,7 @@ void ofBaseMaterial::uploadMatrices(const ofShader & shader,ofGLProgrammableRend
 	shader.setUniformMatrix4f("normalMatrix",normalMatrix);
 }
 
+#ifndef TARGET_NO_SOUND
 
 void ofBaseSoundInput::audioIn( ofSoundBuffer& buffer ){
 	audioIn(&buffer[0], buffer.getNumFrames(), buffer.getNumChannels(), buffer.getDeviceID(), buffer.getTickCount());
@@ -352,3 +353,5 @@ void ofBaseSoundOutput::audioOut( float * output, int bufferSize, int nChannels,
 void ofBaseSoundOutput::audioOut( float * output, int bufferSize, int nChannels ){
 	audioRequested(output, bufferSize, nChannels);
 }
+
+#endif // #ifndef TARGET_NO_SOUND
diff --git a/src/openframeworks/utils/ofSystemUtils.cpp b/src/openframeworks/utils/ofSystemUtils.cpp
index c735d3d..f864ca8 100644
--- a/src/openframeworks/utils/ofSystemUtils.cpp
+++ b/src/openframeworks/utils/ofSystemUtils.cpp
@@ -74,7 +74,9 @@ static void restoreAppWindowFocus(){
 
 #if defined( TARGET_LINUX ) && defined (OF_USING_GTK)
 #include <gtk/gtk.h>
+#ifndef TARGET_NO_VIDEO
 #include "ofGstUtils.h"
+#endif
 #include "Poco/Condition.h"
 
 #if GTK_MAJOR_VERSION>=3
@@ -196,13 +198,16 @@ static void initGTK(){
 		#endif
 		int argc=0; char **argv = NULL;
 		gtk_init (&argc, &argv);
+		#ifndef TARGET_NO_VIDEO
 		ofGstUtils::startGstMainLoop();
+		#endif
 		initialized = true;
 	}
 
 }
 
 static string gtkFileDialog(GtkFileChooserAction action,string windowTitle,string defaultName=""){
+	#ifndef TARGET_NO_VIDEO
 	initGTK();
 	FileDialogData dialogData;
 	dialogData.action = action;
@@ -216,6 +221,41 @@ static string gtkFileDialog(GtkFileChooserAction action,string windowTitle,strin
 		dialogData.condition.wait(dialogData.mutex);
 	}
 	return dialogData.results;
+	#else
+	initGTK();
+	string results;
+
+	const gchar* button_name = "";
+	switch(action){
+	case GTK_FILE_CHOOSER_ACTION_OPEN:
+		button_name = "_Open";
+		break;
+	case GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER:
+		button_name = "Select _All";
+		break;
+	case GTK_FILE_CHOOSER_ACTION_SAVE:
+		button_name = "_Save";
+		break;
+	default:
+		return "";
+		break;
+	}
+
+	GtkWidget *dialog = gtk_file_chooser_dialog_new (windowTitle.c_str(),
+						  NULL,
+						  action,
+						  button_name, GTK_RESPONSE_ACCEPT,
+						  "_Cancel", GTK_RESPONSE_CANCEL,
+						  NULL);
+
+	gtk_file_chooser_set_filename(GTK_FILE_CHOOSER(dialog),defaultName.c_str());
+
+	if (gtk_dialog_run (GTK_DIALOG (dialog)) == GTK_RESPONSE_ACCEPT) {
+		results = gtk_file_chooser_get_filename (GTK_FILE_CHOOSER (dialog));
+	}
+	gtk_widget_destroy (dialog);
+	return results;
+	#endif
 }
 
 #endif
@@ -273,6 +313,7 @@ void ofSystemAlertDialog(string errorMessage){
 	#endif
 
 	#if defined( TARGET_LINUX ) && defined (OF_USING_GTK)
+		#ifndef TARGET_NO_VIDEO
 		initGTK();
 		TextDialogData dialogData;
 		dialogData.text = errorMessage;
@@ -282,6 +323,13 @@ void ofSystemAlertDialog(string errorMessage){
 			dialogData.mutex.lock();
 			dialogData.condition.wait(dialogData.mutex);
 		}
+		#else
+		initGTK();
+		GtkWidget* dialog = gtk_message_dialog_new (NULL, (GtkDialogFlags) 0, GTK_MESSAGE_INFO, GTK_BUTTONS_OK, "%s", errorMessage.c_str());
+
+		gtk_dialog_run (GTK_DIALOG (dialog));
+		gtk_widget_destroy (dialog);
+		#endif
 	#endif
 
 	#ifdef TARGET_ANDROID
@@ -586,6 +634,7 @@ LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
 
 string ofSystemTextBoxDialog(string question, string text){
 #if defined( TARGET_LINUX ) && defined (OF_USING_GTK)
+	#ifndef TARGET_NO_VIDEO
 	initGTK();
 	TextDialogData dialogData;
 	dialogData.text = text;
@@ -597,6 +646,19 @@ string ofSystemTextBoxDialog(string question, string text){
 		dialogData.condition.wait(dialogData.mutex);
 	}
 	text = dialogData.text;
+	#else
+	initGTK();
+	GtkWidget* dialog = gtk_message_dialog_new (NULL, (GtkDialogFlags) 0, GTK_MESSAGE_QUESTION, (GtkButtonsType) GTK_BUTTONS_OK_CANCEL, "%s", question.c_str() );
+	GtkWidget* content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));
+	GtkWidget* textbox = gtk_entry_new();
+	gtk_entry_set_text(GTK_ENTRY(textbox),text.c_str());
+	gtk_container_add (GTK_CONTAINER (content_area), textbox);
+	gtk_widget_show_all (dialog);
+	if(gtk_dialog_run (GTK_DIALOG (dialog))==GTK_RESPONSE_OK){
+		text = gtk_entry_get_text(GTK_ENTRY(textbox));
+	}
+	gtk_widget_destroy (dialog);
+	#endif
 #endif
 
 #ifdef TARGET_OSX
